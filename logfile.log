[     0 ] : -----------------------------------------------------------------------------


[     0 ] : Logfile: Log file opened:
[     0 ] : 27-08-2017	17:40:52
[     0 ] : Logfile: Logfile started...
[     0 ] : Node [ AI_SHOOT ] added. Num Children for [ ROOT_NODE ] now [ 1 ]
[     0 ] : Child index set to [ 1 ]
[     0 ] : Node [ NOT_SHOOT ] added. Num Children for [ AI_SHOOT ] now [ 1 ]
[     0 ] : Child index set to [ 2 ]
[     0 ] : Node [ BULLET_DEST ] added. Num Children for [ AI_SHOOT ] now [ 2 ]
[     0 ] : Child index set to [ 3 ]
[     0 ] : Node [ FIRE_BULLET ] added. Num Children for [ AI_SHOOT ] now [ 3 ]
[     0 ] : Child index set to [ 4 ]
[     0 ] : Node [ AI_HEALTHY ] added. Num Children for [ ROOT_NODE ] now [ 2 ]
[     0 ] : Child index set to [ 5 ]
[     0 ] : Node [ CHECK_HEALTH ] added. Num Children for [ AI_HEALTHY ] now [ 1 ]
[     0 ] : Child index set to [ 6 ]
[     0 ] : Node [ ON_HEALING ] added. Num Children for [ AI_HEALTHY ] now [ 2 ]
[     0 ] : Child index set to [ 7 ]
[     0 ] : Node [ REACHED_HEALTH ] added. Num Children for [ AI_HEALTHY ] now [ 3 ]
[     0 ] : Child index set to [ 8 ]
[     0 ] : Node [ AI_FLEE ] added. Num Children for [ ROOT_NODE ] now [ 3 ]
[     0 ] : Child index set to [ 9 ]
[     0 ] : Node [ CHECK_FLEE ] added. Num Children for [ AI_FLEE ] now [ 1 ]
[     0 ] : Child index set to [ 10 ]
[     0 ] : Node [ ON_FLEE ] added. Num Children for [ AI_FLEE ] now [ 2 ]
[     0 ] : Child index set to [ 11 ]
[     0 ] : Node [ REACHED_FLEE ] added. Num Children for [ AI_FLEE ] now [ 3 ]
[     0 ] : Child index set to [ 12 ]
[     0 ] : Node [ AI_RESUME ] added. Num Children for [ ROOT_NODE ] now [ 4 ]
[     0 ] : Child index set to [ 13 ]
[     0 ] : Node [ IS_NOT_PATROLLING ] added. Num Children for [ AI_RESUME ] now [ 1 ]
[     0 ] : Child index set to [ 14 ]
[     0 ] : Node [ SET_DEST ] added. Num Children for [ AI_RESUME ] now [ 2 ]
[     0 ] : Child index set to [ 15 ]
[     0 ] : Node [ FIND_DEST_PATH ] added. Num Children for [ AI_RESUME ] now [ 3 ]
[     0 ] : Child index set to [ 16 ]
[     0 ] : Node [ AI_PATROL ] added. Num Children for [ ROOT_NODE ] now [ 5 ]
[     0 ] : Child index set to [ 17 ]
[     0 ] : Node [ AI_MOVE ] added. Num Children for [ AI_PATROL ] now [ 1 ]
[     0 ] : Child index set to [ 18 ]
[     0 ] : Node [ CAN_MOVE ] added. Num Children for [ AI_MOVE ] now [ 1 ]
[     0 ] : Child index set to [ 19 ]
[     0 ] : Node [ AI_REVERSE ] added. Num Children for [ AI_MOVE ] now [ 2 ]
[     0 ] : Child index set to [ 20 ]
[     0 ] : Node [ MOVE_TO ] added. Num Children for [ AI_PATROL ] now [ 2 ]
[     0 ] : Child index set to [ 21 ]
[     0 ] : Node [ FIND_WP ] added. Num Children for [ AI_PATROL ] now [ 3 ]
[     0 ] : Child index set to [ 22 ]
[     0 ] : INFO: Compiled against PhysFS version 2.1.0.
[     0 ] : INFO: Linked against PhysFS version 2.1.0.
[     0 ] : INFO: Using packfile for data files
[     0 ] : INFO: Data file path [ data ]
[     0 ] : INFO: Data file path [ data/scripts ]
[     0 ] : INFO: Data file path [ data/data.zip ]
[     0 ] : Script: Scriptengine started.
[     0 ] : Script: ScriptEngine version - [ 2.24.1 ]
[     0 ] : Script: Options - [  AS_64BIT_PTR AS_LINUX AS_X64_GCC  ]
[     0 ] : Script: Registered variable - [ int winWidth ]
[     0 ] : Script: Registered variable - [ int winHeight ]
[     0 ] : Script: Registered variable - [ int currentMode ]
[     0 ] : Script: Registered variable - [ bool gameIsRunning ]
[     0 ] : Script: Registered variable - [ int TICKS_PER_SECOND ]
[     0 ] : Script: Registered variable - [ int MAX_FRAMESKIP ]
[     0 ] : Script: Registered variable - [ float SKIP_TICKS ]
[     0 ] : Script: Registered variable - [ float baseGameSpeed ]
[     0 ] : Script: Registered variable - [ bool useHoldBitmap ]
[     0 ] : Script: Registered variable - [ bool useBackingBitmap ]
[     0 ] : Script: Registered variable - [ bool useCollisionDetection ]
[     0 ] : Script: Registered variable - [ bool debugShowStats ]
[     0 ] : Script: Registered variable - [ int fullScreenValue ]
[     0 ] : Script: Registered variable - [ int inputMethod ]
[     0 ] : Script: Registered variable - [ int numJoysticks ]
[     0 ] : Script: Registered variable - [ bool confirmExit ]
[     0 ] : Script: Registered variable - [ float fadeSpeed ]
[     0 ] : Script: Registered variable - [ float gravity ]
[     0 ] : Script: Registered variable - [ float doorFrameDelay ]
[     0 ] : Script: Registered variable - [ float playerMaxVelocity ]
[     0 ] : Script: Registered variable - [ float playerMaxSpeed ]
[     0 ] : Script: Registered variable - [ float playerAcceleration ]
[     0 ] : Script: Registered variable - [ float playerTransferTimeSet ]
[     0 ] : Script: Registered variable - [ float playerTransferTimeAmount ]
[     0 ] : Script: Registered variable - [ float playerHealthWarningFactor ]
[     0 ] : Script: Registered variable - [ float playerTransferWarning ]
[     0 ] : Script: Registered variable - [ float playerFlashAmount ]
[     0 ] : Script: Registered variable - [ bool doClampPlayerVelocity ]
[     0 ] : Script: Registered variable - [ int currentLevel ]
[     0 ] : Script: Registered variable - [ float g_LineOfSightStep ]
[     0 ] : Script: Registered variable - [ bool allDroidsVisible ]
[     0 ] : Script: Registered variable - [ float progressBarLoadTimes ]
[     0 ] : Script: Registered variable - [ float wayPointDestinationSize ]
[     0 ] : Script: Registered variable - [ float bulletTravelSpeed ]
[     0 ] : Script: Registered variable - [ float explodeFrameDelay ]
[     0 ] : Script: Registered variable - [ float baseDroidAnimateValue ]
[     0 ] : Script: Registered variable - [ float maxDistanceFromPath ]
[     0 ] : Script: Registered variable - [ float moveBackToLineSegment ]
[     0 ] : Script: Registered variable - [ int currentTermMenu ]
[     0 ] : Script: Registered variable - [ int numStars ]
[     0 ] : Script: Registered variable - [ int currentGUIScreen ]
[     0 ] : Script: Registered variable - [ int currentObjectSelected ]
[     0 ] : Script: Registered variable - [ int checkBoxTickSize ]
[     0 ] : Script: Registered variable - [ int numSoundDevices ]
[     0 ] : Script: Registered variable - [ bool playSounds ]
[     0 ] : Script: Registered variable - [ float buttonCurveX ]
[     0 ] : Script: Registered variable - [ float buttonCurveY ]
[     0 ] : Script: Registered variable - [ float keyCodeGap ]
[     0 ] : Script: Registered variable - [ float sliderSelectorRadius ]
[     0 ] : Script: Registered variable - [ float sliderCurveX ]
[     0 ] : Script: Registered variable - [ float sliderCurveY ]
[     0 ] : Script: Registered variable - [ float introStartX ]
[     0 ] : Script: Registered variable - [ float introStartY ]
[     0 ] : Script: Registered variable - [ float introWidth ]
[     0 ] : Script: Registered variable - [ float introHeight ]
[     0 ] : Script: Registered variable - [ float introScrollspeed ]
[     0 ] : Script: Registered variable - [ float introBackRed ]
[     0 ] : Script: Registered variable - [ float introBackGreen ]
[     0 ] : Script: Registered variable - [ float introBackBlue ]
[     0 ] : Script: Registered variable - [ float introBackAlpha ]
[     0 ] : Script: Registered variable - [ float introFontRed ]
[     0 ] : Script: Registered variable - [ float introFontGreen ]
[     0 ] : Script: Registered variable - [ float introFontBlue ]
[     0 ] : Script: Registered variable - [ float introFontAlpha ]
[     0 ] : Script: Registered variable - [ float introScrollDelay ]
[     0 ] : Script: Registered variable - [ float dbStartX ]
[     0 ] : Script: Registered variable - [ float dbStartY ]
[     0 ] : Script: Registered variable - [ float dbWidth ]
[     0 ] : Script: Registered variable - [ float dbHeight ]
[     0 ] : Script: Registered variable - [ float dbScrollspeed ]
[     0 ] : Script: Registered variable - [ float dbBackRed ]
[     0 ] : Script: Registered variable - [ float dbBackGreen ]
[     0 ] : Script: Registered variable - [ float dbBackBlue ]
[     0 ] : Script: Registered variable - [ float dbBackAlpha ]
[     0 ] : Script: Registered variable - [ float dbFontRed ]
[     0 ] : Script: Registered variable - [ float dbFontGreen ]
[     0 ] : Script: Registered variable - [ float dbFontBlue ]
[     0 ] : Script: Registered variable - [ float dbFontAlpha ]
[     0 ] : Script: Registered variable - [ float dbScrollDelay ]
[     0 ] : Script: Registered variable - [ float scrollPauseDelayValue ]
[     0 ] : Script: Registered variable - [ int currentTileType ]
[     0 ] : Script: Registered variable - [ int currentTileColor ]
[     0 ] : Script: Registered variable - [ string currentTileTypeStr ]
[     0 ] : Script: Registered variable - [ string currentTileColorStr ]
[     0 ] : Script: Registered variable - [ string newInitials ]
[     0 ] : Script: Registered variable - [ float dbImagePositionX ]
[     0 ] : Script: Registered variable - [ float dbImagePositionY ]
[     0 ] : Script: Registered variable - [ float statusTextX ]
[     0 ] : Script: Registered variable - [ float statusTextY ]
[     0 ] : Script: Registered variable - [ float scoreTextX ]
[     0 ] : Script: Registered variable - [ int squareWidth ]
[     0 ] : Script: Registered variable - [ int squareHeight ]
[     0 ] : Script: Registered variable - [ float indicatorAnimSpeed ]
[     0 ] : Script: Registered variable - [ float scoreDelay ]
[     0 ] : Script: Registered variable - [ float scoreDelayValue ]
[     0 ] : Script: Registered variable - [ int numConsoleCommands ]
[     0 ] : Script: Registered variable - [ int as_numSamples ]
[     0 ] : Script: Registered variable - [ int as_numMultiSamples ]
[     0 ] : Script: Registered variable - [ bool as_useSound ]
[     0 ] : Script: Registered variable - [ string volumeLevelStr ]
[     0 ] : Script: Registered variable - [ int transferDroidPosX ]
[     0 ] : Script: Registered variable - [ int transferDroidPosY ]
[     0 ] : Script: Registered variable - [ int transferTextPosX ]
[     0 ] : Script: Registered variable - [ int transferTextPosY ]
[     0 ] : Script: Registered variable - [ int transferTextHeight ]
[     0 ] : Script: Registered variable - [ int transferTitlePosX ]
[     0 ] : Script: Registered variable - [ int transferTitlePosY ]
[     0 ] : Script: Registered variable - [ float	transferPlayCountDown ]
[     0 ] : Script: Registered variable - [ int transferPlayCountLeftDefault ]
[     0 ] : Script: Registered variable - [ int droidOnSide ]
[     0 ] : Script: Registered variable - [ int droidBlockPos ]
[     0 ] : Script: Registered variable - [ int numDroidTokens ]
[     0 ] : Script: Registered variable - [ int droidToTransferInto ]
[     0 ] : Script: Registered variable - [ float circuitTimeAlive ]
[     0 ] : Script: Registered variable - [ int droidTypeDBIndex ]
[     0 ] : Script: Registered variable - [ int playerDroidTypeDBIndex ]
[     0 ] : Script: Registered variable - [ int yellowAlertLevel ]
[     0 ] : Script: Registered variable - [ int redAlertLevel ]
[     0 ] : Script: Registered variable - [ float bulletDisruptSpeed ]
[     0 ] : Script: Registered variable - [ float healingRate ]
[     0 ] : Script: Registered variable - [ float healingTimer ]
[     0 ] : Script: Registered variable - [ int collisionDamageInflicted ]
[     0 ] : Script: Registered variable - [ int collisionExplosionDamage ]
[     0 ] : Script: Registered variable - [ float shipDamping ]
[     0 ] : Script: Registered variable - [ float collisionSlop ]
[     0 ] : Script: Registered variable - [ float wallFriction ]
[     0 ] : Script: Registered variable - [ float wallRadius ]
[     0 ] : Script: Registered variable - [ float playerMass ]
[     0 ] : Script: Registered variable - [ float playerRadius ]
[     0 ] : Script: Registered variable - [ float playerFriction ]
[     0 ] : Script: Registered variable - [ float playerElastic ]
[     0 ] : Script: Registered variable - [ float bulletMass ]
[     0 ] : Script: Registered variable - [ int levelBonus ]
[     0 ] : Script: Registered variable - [ int numAStarPaths ]
[     0 ] : Script: Registered variable - [ bool profileParticles ]
[     0 ] : Script: Registered variable - [ int particleRenderType ]
[     0 ] : Script: Registered variable - [ int particleVelocityExplosion ]
[     0 ] : Script: Registered variable - [ int particleVelocityExplosionAdd ]
[     0 ] : Script: Registered variable - [ int particleVelocitySpark ]
[     0 ] : Script: Registered variable - [ int particleVelocitySparkAdd ]
[     0 ] : Script: Registered variable - [ int particleNumberExplosion ]
[     0 ] : Script: Registered variable - [ int particleNumberExplosionAdd ]
[     0 ] : Script: Registered variable - [ int particleNumberTrail ]
[     0 ] : Script: Registered variable - [ int particleNumberTrailAdd ]
[     0 ] : Script: Registered variable - [ int particleTrailAlphaReset ]
[     0 ] : Script: Registered variable - [ int particleTrailAlphaResetAdd ]
[     0 ] : Script: Registered variable - [ int particleNumberSpark ]
[     0 ] : Script: Registered variable - [ int particleNumberSparkAdd ]
[     0 ] : Script: Registered variable - [ float particleExplosionReduce ]
[     0 ] : Script: Registered variable - [ float particleSparkReduce ]
[     0 ] : Script: Registered variable - [ float particleTrailReduce ]
[     0 ] : Script: Registered variable - [ int particleTrailLimit ]
[     0 ] : Script: Registered variable - [ float particleMass ]
[     0 ] : Script: Registered variable - [ float particleFriction ]
[     0 ] : Script: Registered variable - [ float particleElastic ]
[     0 ] : Script: Registered variable - [ float particleSize ]
[     0 ] : Script: Registered variable - [ int particleBlendSrc ]
[     0 ] : Script: Registered variable - [ int particleBlendDst ]
[     0 ] : Script: Registered variable - [ int currentLanguage ]
[     0 ] : Script: Registered variable - [ float droidBeenShotValue ]
[     0 ] : Script: Registered variable - [ float witnessShootValue ]
[     0 ] : Script: Registered variable - [ float witnessTransferValue ]
[     0 ] : Script: Registered variable - [ float ai_beenShot ]
[     0 ] : Script: Registered variable - [ float ai_healthAmount ]
[     0 ] : Script: Registered variable - [ float ai_playerVisible ]
[     0 ] : Script: Registered variable - [ float ai_witnessShoot ]
[     0 ] : Script: Registered variable - [ float ai_witnessTransfer ]
[     0 ] : Script: Registered variable - [ float ai_greenFactor ]
[     0 ] : Script: Registered variable - [ float ai_yellowFactor ]
[     0 ] : Script: Registered variable - [ float ai_redFactor ]
[     0 ] : Script: Registered variable - [ float staticScreenShowTime ]
[     0 ] : Script: Registered variable - [ float staticImageCounterTime ]
[     0 ] : Script: Registered variable - [ float endScreenCounterTime ]
[     0 ] : Script: Registered variable - [ float as_soundPlayDelay ]
[     0 ] : Script: Registered variable - [ float repeatKeysDelay ]
[     0 ] : Script: Registered variable - [ float badHealthFactor ]
[     0 ] : Script: Call type [ asCALL_CDECL ]
[     0 ] : Script: Registered function - [ void sys_printConInt(string &in, uint param) ]
[     0 ] : Script: Registered function - [ void sys_printConStr(string &in, string &in) ]
[     0 ] : Script: Registered function - [ void sys_printString(float posX, float posY, string &in) ]
[     0 ] : Script: Registered function - [ void sys_addScriptCommand(string &in, string &in, string &in, bool setParam) ]
[     0 ] : Script: Registered function - [ void al_set_new_display_option(int option, int value, int importance) ]
[     0 ] : Script: Registered function - [ void al_set_new_display_flags(int option) ]
[     0 ] : Script: Registered function - [ void al_set_new_display_refresh_rate(int refresh_rate) ]
[     0 ] : Script: Registered function - [ void io_loadConfigFile			(string &in) ]
[     0 ] : Script: Registered function - [ void io_closeConfigFile			() ]
[     0 ] : Script: Registered function - [ void io_saveConfigFile			(string &in) ]
[     0 ] : Script: Registered function - [ int io_readConfigValuesInt		(string &in) ]
[     0 ] : Script: Registered function - [ string io_readConfigValuesString	(string &in) ]
[     0 ] : Script: Registered function - [ float io_readConfigValuesFloat 	(string &in) ]
[     0 ] : Script: Registered function - [ void io_saveConfigValueString		(string &in, string &in) ]
[     0 ] : Script: Registered function - [ void io_saveConfigValueFloat		(string &in, float keyValue) ]
[     0 ] : Script: Registered function - [ void io_saveConfigValueInt		(string &in, int keyValue) ]
[     0 ] : Script: Registered function - [ bool io_doKeyBindings(string &in) ]
[     0 ] : Script: Registered function - [ void gam_drawBitmapFromScript(int index, float posX, float posY, float red, float green, float 
[     0 ] : Script: Registered function - [ void gam_drawSpriteFromScript(int index, float posX, float posY, float red, float green, float 
[     0 ] : Script: Registered function - [ void sys_setFont			(int newFont) ]
[     0 ] : Script: Registered function - [ bool io_loadttfFont		(int fontIndex, int fontSize, string &in) ]
[     0 ] : Script: Registered function - [ void sys_setFontColor		(float r, float g, float b, float a) ]
[     0 ] : Script: Registered function - [ void sys_playSoundFromScript(int whichSound, float pan, bool loopIt) ]
[     0 ] : Script: Registered function - [ void io_setTileSetColor(string &in) ]
[     0 ] : Script: Registered function - [ void io_setTileSetType(string &in) ]
[     0 ] : Script: Registered function - [ void as_guiCreateNewScreen		(string &in) ]
[     0 ] : Script: Registered function - [ void as_guiCreateObject			(int guiObjectType, string &in) ]
[     0 ] : Script: Registered function - [ int as_guiFindIndex				(int guiObjectType, string &in) ]
[     0 ] : Script: Registered function - [ void as_gui_changeToGUIScreen		(int newScreen) ]
[     0 ] : Script: Registered function - [ void as_guiSetObjectColor    (int guiObjectType, string &in, int whichColor, float red, float g
[     0 ] : Script: Registered function - [ void as_guiSetObjectPosition (int guiObjectType, string &in, int coordType, float startX, float
[     0 ] : Script: Registered function - [ void as_guiSetObjectLabel    (int guiObjectType, string &in, int labelPos, string &in) ]
[     0 ] : Script: Registered function - [ void as_guiSetObjectFunctions(int guiObjectType, string &in, string &in, string &in) ]
[     0 ] : Script: Registered function - [ void as_guiAddObjectToScreen (int guiObjectType, string &in, string &in) ]
[     0 ] : Script: Registered function - [ void as_guiSetCheckboxGroup  (string &in, int whichGroup) ]
[     0 ] : Script: Registered function - [ void as_guiSetCheckboxTick   (string &in, int whichGroup, bool ticked) ]
[     0 ] : Script: Registered function - [ void as_guiSetupDBText() ]
[     0 ] : Script: Registered function - [ void as_guiSetImageFilename(string &in, string &in) ]
[     0 ] : Script: Registered function - [ string gui_getString(string &in) ]
[     0 ] : Script: Registered function - [ void gui_addKeyAndText(string &in, string &in) ]
[     0 ] : Script: Registered function - [ void as_guiSetObjectFocus(string &in) ]
[     0 ] : Script: Registered function - [ void as_guiAddSliderElement(string &in, int elementType, string &in, string &in) ]
[     0 ] : Script: Registered function - [ string gui_IntToString(int intValue) ]
[     0 ] : Script: Registered function - [ int gui_StringToInt(string &in) ]
[     0 ] : Script: Registered function - [ string gui_IntToChar(int intValue) ]
[     0 ] : Script: Registered function - [ string as_guiGetSliderValue(string &in) ]
[     0 ] : Script: Registered function - [ void as_guiSetSliderValue(string &in, string &in) ]
[     0 ] : Script: Registered function - [ void io_loadNewTileSet() ]
[     0 ] : Script: Registered function - [ void as_guiAddKeyCodeElement(string &in, string &in, int elementKeyCode) ]
[     0 ] : Script: Registered function - [ void as_guiCopyKeysInto(string &in) ]
[     0 ] : Script: Registered function - [ void as_guiCopyGUIIntoKeys(string &in) ]
[     0 ] : Script: Registered function - [ bool io_saveKeyBindings (string &in) ]
[     0 ] : Script: Registered function - [ bool gam_loadDroidModel (int whichDroid) ]
[     0 ] : Script: Registered function - [ void as_transSetDefaultValues(int cellIndex) ]
[     0 ] : Script: Registered function - [ void as_transSetCellPos(int cellIndex, int posX, int posY) ]
[     0 ] : Script: Registered function - [ void as_transSetCellColor(int whichCell, int colType, float red, float green, float blue, float
[     0 ] : Script: Registered function - [ void as_tranSetCircuitType(int whichCell, int whichSide, int typeSet) ]
[     0 ] : Script: Registered function - [ void as_tranSetEffectType(int whichCell, int whichSide, int effect) ]
[     0 ] : Script: Registered function - [ int as_getCappedRandomNum(int cap) ]
[     0 ] : Script: Registered function - [ bool as_circuitNotPowered(int whichCell, int whichSide) ]
[     0 ] : Script: Registered function - [ int as_getCellColor(int whichCell, int whichSide) ]
[     0 ] : Script: Registered function - [ void trn_activateCircuit(int whichCell, int whichSide) ]
[     0 ] : Script: Registered function - [ void trn_placeToken(int whichCell, int whichSide, int playerOrDroid) ]
[     0 ] : Script: Registered function - [ void as_printVariables() ]
[     0 ] : Script: Registered function - [ void as_changeGameMode(int newMode, bool useFade) ]
[     0 ] : Script: Registered function - [ void gam_changeToLevelFromScript(int newLevel, bool firstTime) ]
[     0 ] : Script: Registered function - [ void as_setParticleColor(int whichParticle, int red, int green, int blue, int alpha) ]
[     0 ] : Script: Registered function - [ void gam_addNewInitials() ]
[     0 ] : Script: Registered function - [ void gam_resetScore() ]
[     0 ] : Script: Registered function - [ void gui_populateScoreTableGUI() ]
[     0 ] : Error RegisterObjectType [ asALREADY_REGISTERED ]
[     0 ] : Size of script [ 1305 ] - [ shutdown.sc ]
[     0 ] : Size of script [ 1198 ] - [ particles.sc ]
[     0 ] : Size of script [ 4304 ] - [ conCommands.sc ]
[     0 ] : Size of script [ 78815 ] - [ gui_main.sc ]
[     0 ] : Size of script [ 6312 ] - [ transferGame.sc ]
[     0 ] : Size of script [ 7394 ] - [ transferDroidAI.sc ]
[     0 ] : Size of script [ 9827 ] - [ startup.sc ]
[     0 ] : Size of script [ 24825 ] - [ textEnglish.sc ]
[     0 ] : Size of script [ 492 ] - [ textItalian.sc ]
[     0 ] : Number of functions in script [ 13 ]
[     0 ] : Func ID for [ void as_initGameVars() ] - [ 10272448 ]
[     0 ] : Func ID for [ void as_addAllScriptCommands() ] - [ 10233280 ]
[     0 ] : Func ID for [ void as_shutdown() ] - [ 10151552 ]
[     0 ] : Func ID for [ void as_loadFonts() ] - [ 10270976 ]
[     0 ] : Func ID for [ void as_guiSetupGUI() ] - [ 10250352 ]
[     0 ] : Func ID for [ void as_setIntroValues() ] - [ 10271712 ]
[     0 ] : Func ID for [ void as_setdbValues() ] - [ 10249616 ]
[     0 ] : Func ID for [ void setupDefaultCellValues() ] - [ 10253072 ]
[     0 ] : Func ID for [ void as_processTransferAI() ] - [ 10269728 ]
[     0 ] : Func ID for [ void as_initParticleValues() ] - [ 10182896 ]
[     0 ] : Func ID for [ void as_setLanguageStrings() ] - [ 10273184 ]
[     0 ] : Func ID for [ void as_guiHandleButtonPress(string &in) ] - [ 10236592 ]
[     0 ] : Func ID for [ void as_guiHandleMouseOver(string &in) ] - [ 10235104 ]
[     0 ] : [ No joysticks found. ] [ Use Keyboard. ]
[     0 ] : FuncID for script function [ bool as_conCommandQuit() ] is [ 10231312 ]
[     0 ] : FuncID for script function [ bool as_conCommandQuit() ] is [ 10231312 ]
[     0 ] : FuncID for script function [ bool as_toggleTileCollision(int &in) ] is [ 10230608 ]
[     0 ] : FuncID for script function [ void as_changeToLevel(int &in) ] is [ 10229904 ]
[     0 ] : FuncID for script function [ void as_setStepsLOS(int &in) ] is [ 10228864 ]
[     0 ] : FuncID for script function [ void as_setDroidVisibility(int &in) ] is [ 10228064 ]
[     0 ] : FuncID for script function [ void as_debugShowStats(int &in) ] is [ 10227216 ]
[     0 ] : INFO: Object [ 50.00 60.00 ]
[     0 ] : Allegro Version: 5.2.2 Release 0
[     0 ] : INFO: Keyboard installed.
[     0 ] : INFO: Allegro Font Version: 5.2.2 Release 0
[     0 ] : INFO: Image addon installed.
[     0 ] : INFO: Primitives addon installed.
[     0 ] : INFO: Joysticks installed.
[     0 ] : INFO: Allegro TTF Version: 5.2.2 Release 0
[     0 ] : Sound started: 5.2.2 Release: 0
[     0 ] : INFO: Got hardware accelerated backing bitmap
[     0 ] : File [ Digital.ttf ] exists.
[     0 ] : File [ Digital.ttf ] exists.
[     1 ] : File [ Digital.ttf ] exists.
[     1 ] : Keybind: Info: Key states read from file.
[     1 ] : Called from io_printKeyBind - [ 0 ]
[     1 ] : ------------------------------------
[     1 ] : [ Game Left : [ Left] ]
[     1 ] : [ Game Right : [ Right] ]
[     1 ] : [ Game Up : [ Up] ]
[     1 ] : [ Game Down : [ Down] ]
[     1 ] : [ Show console : [ grave] ]
[     1 ] : [ Game action : [ Control_L] ]
[     1 ] : [ Exit the game : [ Escape] ]
[     1 ] : [ Save Screenshot : [ F12] ]
[     1 ] : [ Pause Game : [ p] ]
[     1 ] : Screen [ scrMainMenu ] created.
[     1 ] : Added new object - [ buttonStartGame ]
[     1 ] : Setting position for - [ buttonStartGame ]
[     1 ] : Setting label for - [ buttonStartGame ]
[     1 ] : Setting the function call for [ buttonStartGame ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonStartGame ] to screen [ scrMainMenu ]
[     1 ] : Screen [ scrMainMenu ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonStartTutorial ]
[     1 ] : Setting position for - [ buttonStartTutorial ]
[     1 ] : Setting label for - [ buttonStartTutorial ]
[     1 ] : Setting the function call for [ buttonStartTutorial ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonStartTutorial ] to screen [ scrMainMenu ]
[     1 ] : Screen [ scrMainMenu ] objectID [ 1 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonOptions ]
[     1 ] : Setting position for - [ buttonOptions ]
[     1 ] : Setting label for - [ buttonOptions ]
[     1 ] : Setting the function call for [ buttonOptions ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptions ] to screen [ scrMainMenu ]
[     1 ] : Screen [ scrMainMenu ] objectID [ 2 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonHelp ]
[     1 ] : Setting position for - [ buttonHelp ]
[     1 ] : Setting label for - [ buttonHelp ]
[     1 ] : Setting the function call for [ buttonHelp ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonHelp ] to screen [ scrMainMenu ]
[     1 ] : Screen [ scrMainMenu ] objectID [ 3 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonQuit ]
[     1 ] : Setting position for - [ buttonQuit ]
[     1 ] : Setting label for - [ buttonQuit ]
[     1 ] : Setting the function call for [ buttonQuit ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonQuit ] to screen [ scrMainMenu ]
[     1 ] : Screen [ scrMainMenu ] objectID [ 4 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrOptions ] created.
[     1 ] : Added new object - [ buttonOptionVideo ]
[     1 ] : Setting position for - [ buttonOptionVideo ]
[     1 ] : Setting label for - [ buttonOptionVideo ]
[     1 ] : Setting the function call for [ buttonOptionVideo ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptionVideo ] to screen [ scrOptions ]
[     1 ] : Screen [ scrOptions ] objectID [ 5 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonOptionAudio ]
[     1 ] : Setting position for - [ buttonOptionAudio ]
[     1 ] : Setting label for - [ buttonOptionAudio ]
[     1 ] : Setting the function call for [ buttonOptionAudio ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptionAudio ] to screen [ scrOptions ]
[     1 ] : Screen [ scrOptions ] objectID [ 6 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonOptionGraphics ]
[     1 ] : Setting position for - [ buttonOptionGraphics ]
[     1 ] : Setting label for - [ buttonOptionGraphics ]
[     1 ] : Setting the function call for [ buttonOptionGraphics ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptionGraphics ] to screen [ scrOptions ]
[     1 ] : Screen [ scrOptions ] objectID [ 7 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonOptionGame ]
[     1 ] : Setting position for - [ buttonOptionGame ]
[     1 ] : Setting label for - [ buttonOptionGame ]
[     1 ] : Setting the function call for [ buttonOptionGame ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptionGame ] to screen [ scrOptions ]
[     1 ] : Screen [ scrOptions ] objectID [ 8 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonOptionControls ]
[     1 ] : Setting position for - [ buttonOptionControls ]
[     1 ] : Setting label for - [ buttonOptionControls ]
[     1 ] : Setting the function call for [ buttonOptionControls ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptionControls ] to screen [ scrOptions ]
[     1 ] : Screen [ scrOptions ] objectID [ 9 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonOptionReturn ]
[     1 ] : Setting position for - [ buttonOptionReturn ]
[     1 ] : Setting label for - [ buttonOptionReturn ]
[     1 ] : Setting the function call for [ buttonOptionReturn ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonOptionReturn ] to screen [ scrOptions ]
[     1 ] : Screen [ scrOptions ] objectID [ 10 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrVideoOptions ] created.
[     1 ] : Added new object - [ textLabelResolution ]
[     1 ] : Setting position for - [ textLabelResolution ]
[     1 ] : Setting label for - [ textLabelResolution ]
[     1 ] : Adding [ textLabelResolution ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ videoUseBackingBMP ]
[     1 ] : GUI_OBJECT_CHECKBOX size is now - [ 1 ]
[     1 ] : Setting the function call for [ videoUseBackingBMP ] - [ scr_guiHandleButtonPress ]
[     1 ] : Setting position for - [ videoUseBackingBMP ]
[     1 ] : Setting label for - [ videoUseBackingBMP ]
[     1 ] : Setting checkBox group for - [ videoUseBackingBMP ]
[     1 ] : Setting checkBox tick for - [ videoUseBackingBMP ]
[     1 ] : Adding [ videoUseBackingBMP ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ videoUseHoldingBMP ]
[     1 ] : GUI_OBJECT_CHECKBOX size is now - [ 2 ]
[     1 ] : Setting the function call for [ videoUseHoldingBMP ] - [ scr_guiHandleButtonPress ]
[     1 ] : Setting position for - [ videoUseHoldingBMP ]
[     1 ] : Setting label for - [ videoUseHoldingBMP ]
[     1 ] : Setting checkBox group for - [ videoUseHoldingBMP ]
[     1 ] : Setting checkBox tick for - [ videoUseHoldingBMP ]
[     1 ] : Adding [ videoUseHoldingBMP ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 1 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ checkBoxFullScreen ]
[     1 ] : GUI_OBJECT_CHECKBOX size is now - [ 3 ]
[     1 ] : Setting the function call for [ checkBoxFullScreen ] - [ scr_guiHandleButtonPress ]
[     1 ] : Setting position for - [ checkBoxFullScreen ]
[     1 ] : Setting label for - [ checkBoxFullScreen ]
[     1 ] : Setting checkBox group for - [ checkBoxFullScreen ]
[     1 ] : Setting checkBox tick for - [ checkBoxFullScreen ]
[     1 ] : Adding [ checkBoxFullScreen ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 2 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ sliderSwapType ]
[     1 ] : Setting position for - [ sliderSwapType ]
[     1 ] : Setting label for - [ sliderSwapType ]
[     1 ] : Adding [ sliderSwapType ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ sliderVSyncType ]
[     1 ] : Setting position for - [ sliderVSyncType ]
[     1 ] : Setting label for - [ sliderVSyncType ]
[     1 ] : Adding [ sliderVSyncType ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 1 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonVideoOptionsApply ]
[     1 ] : Setting position for - [ buttonVideoOptionsApply ]
[     1 ] : Setting label for - [ buttonVideoOptionsApply ]
[     1 ] : Started setLabel [ buttonVideoOptionsApply ]
[     1 ] : Setting the function call for [ buttonVideoOptionsApply ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonVideoOptionsApply ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 11 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonVideoOptionsCancel ]
[     1 ] : Setting position for - [ buttonVideoOptionsCancel ]
[     1 ] : Setting label for - [ buttonVideoOptionsCancel ]
[     1 ] : Setting the function call for [ buttonVideoOptionsCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonVideoOptionsCancel ] to screen [ scrVideoOptions ]
[     1 ] : Screen [ scrVideoOptions ] objectID [ 12 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrAudioOptions ] created.
[     1 ] : Added new object - [ textLabelSoundOptions ]
[     1 ] : Setting position for - [ textLabelSoundOptions ]
[     1 ] : Setting label for - [ textLabelSoundOptions ]
[     1 ] : Adding [ textLabelSoundOptions ] to screen [ scrAudioOptions ]
[     1 ] : Screen [ scrAudioOptions ] objectID [ 1 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ audioCheckBox ]
[     1 ] : GUI_OBJECT_CHECKBOX size is now - [ 4 ]
[     1 ] : Setting the function call for [ audioCheckBox ] - [ scr_guiHandleButtonPress ]
[     1 ] : Setting position for - [ audioCheckBox ]
[     1 ] : Setting label for - [ audioCheckBox ]
[     1 ] : Setting checkBox group for - [ audioCheckBox ]
[     1 ] : Setting checkBox tick for - [ audioCheckBox ]
[     1 ] : Adding [ audioCheckBox ] to screen [ scrAudioOptions ]
[     1 ] : Screen [ scrAudioOptions ] objectID [ 3 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ sliderAudioVol ]
[     1 ] : Setting position for - [ sliderAudioVol ]
[     1 ] : Setting label for - [ sliderAudioVol ]
[     1 ] : Adding [ sliderAudioVol ] to screen [ scrAudioOptions ]
[     1 ] : Screen [ scrAudioOptions ] objectID [ 2 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonAudioOptionsApply ]
[     1 ] : Setting position for - [ buttonAudioOptionsApply ]
[     1 ] : Setting label for - [ buttonAudioOptionsApply ]
[     1 ] : Setting the function call for [ buttonAudioOptionsApply ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonAudioOptionsApply ] to screen [ scrAudioOptions ]
[     1 ] : Screen [ scrAudioOptions ] objectID [ 13 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonAudioOptionsCancel ]
[     1 ] : Setting position for - [ buttonAudioOptionsCancel ]
[     1 ] : Setting label for - [ buttonAudioOptionsCancel ]
[     1 ] : Setting the function call for [ buttonAudioOptionsCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonAudioOptionsCancel ] to screen [ scrAudioOptions ]
[     1 ] : Screen [ scrAudioOptions ] objectID [ 14 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrGraphics ] created.
[     1 ] : Added new object - [ textLabelGraphics ]
[     1 ] : Setting position for - [ textLabelGraphics ]
[     1 ] : Setting label for - [ textLabelGraphics ]
[     1 ] : Adding [ textLabelGraphics ] to screen [ scrGraphics ]
[     1 ] : Screen [ scrGraphics ] objectID [ 2 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ sliderTileColor ]
[     1 ] : Setting position for - [ sliderTileColor ]
[     1 ] : Setting label for - [ sliderTileColor ]
[     1 ] : Adding [ sliderTileColor ] to screen [ scrGraphics ]
[     1 ] : Screen [ scrGraphics ] objectID [ 3 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ sliderTileType ]
[     1 ] : Setting position for - [ sliderTileType ]
[     1 ] : Setting label for - [ sliderTileType ]
[     1 ] : Adding [ sliderTileType ] to screen [ scrGraphics ]
[     1 ] : Screen [ scrGraphics ] objectID [ 4 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ sliderParticleType ]
[     1 ] : Setting position for - [ sliderParticleType ]
[     1 ] : Setting label for - [ sliderParticleType ]
[     1 ] : Adding [ sliderParticleType ] to screen [ scrGraphics ]
[     1 ] : Screen [ scrGraphics ] objectID [ 5 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonGraphicsApply ]
[     1 ] : Setting position for - [ buttonGraphicsApply ]
[     1 ] : Setting label for - [ buttonGraphicsApply ]
[     1 ] : Setting the function call for [ buttonGraphicsApply ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonGraphicsApply ] to screen [ scrGraphics ]
[     1 ] : Screen [ scrGraphics ] objectID [ 15 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonGraphicsCancel ]
[     1 ] : Setting position for - [ buttonGraphicsCancel ]
[     1 ] : Setting label for - [ buttonGraphicsCancel ]
[     1 ] : Setting the function call for [ buttonGraphicsCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonGraphicsCancel ] to screen [ scrGraphics ]
[     1 ] : Screen [ scrGraphics ] objectID [ 16 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrGameOptions ] created.
[     1 ] : Added new object - [ sliderLanguage ]
[     1 ] : Setting position for - [ sliderLanguage ]
[     1 ] : Setting label for - [ sliderLanguage ]
[     1 ] : Adding [ sliderLanguage ] to screen [ scrGameOptions ]
[     1 ] : Screen [ scrGameOptions ] objectID [ 6 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonGameOptionsApply ]
[     1 ] : Setting position for - [ buttonGameOptionsApply ]
[     1 ] : Setting label for - [ buttonGameOptionsApply ]
[     1 ] : Setting the function call for [ buttonGameOptionsApply ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonGameOptionsApply ] to screen [ scrGameOptions ]
[     1 ] : Screen [ scrGameOptions ] objectID [ 17 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonGameOptionsCancel ]
[     1 ] : Setting position for - [ buttonGameOptionsCancel ]
[     1 ] : Setting label for - [ buttonGameOptionsCancel ]
[     1 ] : Setting the function call for [ buttonGameOptionsCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonGameOptionsCancel ] to screen [ scrGameOptions ]
[     1 ] : Screen [ scrGameOptions ] objectID [ 18 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrExitQuestion ] created.
[     1 ] : Added new object - [ exitTextBox ]
[     1 ] : Setting position for - [ exitTextBox ]
[     1 ] : Setting colors for - [ exitTextBox ]
[     1 ] : Setting label for - [ exitTextBox ]
[     1 ] : Adding [ exitTextBox ] to screen [ scrExitQuestion ]
[     1 ] : Screen [ scrExitQuestion ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonExitYes ]
[     1 ] : Setting position for - [ buttonExitYes ]
[     1 ] : Setting label for - [ buttonExitYes ]
[     1 ] : Setting the function call for [ buttonExitYes ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonExitYes ] to screen [ scrExitQuestion ]
[     1 ] : Screen [ scrExitQuestion ] objectID [ 19 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonExitCancel ]
[     1 ] : Setting position for - [ buttonExitCancel ]
[     1 ] : Setting label for - [ buttonExitCancel ]
[     1 ] : Setting the function call for [ buttonExitCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonExitCancel ] to screen [ scrExitQuestion ]
[     1 ] : Screen [ scrExitQuestion ] objectID [ 20 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTerminal ] created.
[     1 ] : Added new object - [ buttonTermLogOff ]
[     1 ] : Setting position for - [ buttonTermLogOff ]
[     1 ] : Setting label for - [ buttonTermLogOff ]
[     1 ] : Setting the function call for [ buttonTermLogOff ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTermLogOff ] to screen [ scrTerminal ]
[     1 ] : Screen [ scrTerminal ] objectID [ 21 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTermInfo ]
[     1 ] : Setting position for - [ buttonTermInfo ]
[     1 ] : Setting label for - [ buttonTermInfo ]
[     1 ] : Setting the function call for [ buttonTermInfo ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTermInfo ] to screen [ scrTerminal ]
[     1 ] : Screen [ scrTerminal ] objectID [ 22 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTermDeck ]
[     1 ] : Setting position for - [ buttonTermDeck ]
[     1 ] : Setting label for - [ buttonTermDeck ]
[     1 ] : Setting the function call for [ buttonTermDeck ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTermDeck ] to screen [ scrTerminal ]
[     1 ] : Screen [ scrTerminal ] objectID [ 23 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTermShip ]
[     1 ] : Setting position for - [ buttonTermShip ]
[     1 ] : Setting label for - [ buttonTermShip ]
[     1 ] : Setting the function call for [ buttonTermShip ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTermShip ] to screen [ scrTerminal ]
[     1 ] : Screen [ scrTerminal ] objectID [ 24 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutorial ] created.
[     1 ] : Added new object - [ textLabelTutMove ]
[     1 ] : Setting position for - [ textLabelTutMove ]
[     1 ] : Setting label for - [ textLabelTutMove ]
[     1 ] : Adding [ textLabelTutMove ] to screen [ scrTutorial ]
[     1 ] : Screen [ scrTutorial ] objectID [ 3 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutTextBox ]
[     1 ] : Setting position for - [ tutTextBox ]
[     1 ] : Setting colors for - [ tutTextBox ]
[     1 ] : Setting label for - [ tutTextBox ]
[     1 ] : Adding [ tutTextBox ] to screen [ scrTutorial ]
[     1 ] : Screen [ scrTutorial ] objectID [ 1 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutMoveNext ]
[     1 ] : Setting position for - [ buttonTutMoveNext ]
[     1 ] : Setting label for - [ buttonTutMoveNext ]
[     1 ] : Setting the function call for [ buttonTutMoveNext ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutMoveNext ] to screen [ scrTutorial ]
[     1 ] : Screen [ scrTutorial ] objectID [ 25 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutorialCancel ]
[     1 ] : Setting position for - [ buttonTutorialCancel ]
[     1 ] : Setting label for - [ buttonTutorialCancel ]
[     1 ] : Setting the function call for [ buttonTutorialCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutorialCancel ] to screen [ scrTutorial ]
[     1 ] : Screen [ scrTutorial ] objectID [ 26 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutTransfer ] created.
[     1 ] : Added new object - [ textLabelTutTransMove ]
[     1 ] : Setting position for - [ textLabelTutTransMove ]
[     1 ] : Setting label for - [ textLabelTutTransMove ]
[     1 ] : Adding [ textLabelTutTransMove ] to screen [ scrTutTransfer ]
[     1 ] : Screen [ scrTutTransfer ] objectID [ 4 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutTransTextBox ]
[     1 ] : Setting position for - [ tutTransTextBox ]
[     1 ] : Setting colors for - [ tutTransTextBox ]
[     1 ] : Setting label for - [ tutTransTextBox ]
[     1 ] : Adding [ tutTransTextBox ] to screen [ scrTutTransfer ]
[     1 ] : Screen [ scrTutTransfer ] objectID [ 2 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTransNext ]
[     1 ] : Setting position for - [ buttonTutTransNext ]
[     1 ] : Setting label for - [ buttonTutTransNext ]
[     1 ] : Setting the function call for [ buttonTutTransNext ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTransNext ] to screen [ scrTutTransfer ]
[     1 ] : Screen [ scrTutTransfer ] objectID [ 27 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTransCancel ]
[     1 ] : Setting position for - [ buttonTutTransCancel ]
[     1 ] : Setting label for - [ buttonTutTransCancel ]
[     1 ] : Setting the function call for [ buttonTutTransCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTransCancel ] to screen [ scrTutTransfer ]
[     1 ] : Screen [ scrTutTransfer ] objectID [ 28 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutTransGame ] created.
[     1 ] : Added new object - [ textLabelTutTransGame ]
[     1 ] : Setting position for - [ textLabelTutTransGame ]
[     1 ] : Setting label for - [ textLabelTutTransGame ]
[     1 ] : Adding [ textLabelTutTransGame ] to screen [ scrTutTransGame ]
[     1 ] : Screen [ scrTutTransGame ] objectID [ 5 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutTransGameTextBox ]
[     1 ] : Setting position for - [ tutTransGameTextBox ]
[     1 ] : Setting colors for - [ tutTransGameTextBox ]
[     1 ] : Setting label for - [ tutTransGameTextBox ]
[     1 ] : Adding [ tutTransGameTextBox ] to screen [ scrTutTransGame ]
[     1 ] : Screen [ scrTutTransGame ] objectID [ 3 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTransGameNext ]
[     1 ] : Setting position for - [ buttonTutTransGameNext ]
[     1 ] : Setting label for - [ buttonTutTransGameNext ]
[     1 ] : Setting the function call for [ buttonTutTransGameNext ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTransGameNext ] to screen [ scrTutTransGame ]
[     1 ] : Screen [ scrTutTransGame ] objectID [ 29 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTransGameCancel ]
[     1 ] : Setting position for - [ buttonTutTransGameCancel ]
[     1 ] : Setting label for - [ buttonTutTransGameCancel ]
[     1 ] : Setting the function call for [ buttonTutTransGameCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTransGameCancel ] to screen [ scrTutTransGame ]
[     1 ] : Screen [ scrTutTransGame ] objectID [ 30 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutLifts ] created.
[     1 ] : Added new object - [ textLabelTutLifts ]
[     1 ] : Setting position for - [ textLabelTutLifts ]
[     1 ] : Setting label for - [ textLabelTutLifts ]
[     1 ] : Adding [ textLabelTutLifts ] to screen [ scrTutLifts ]
[     1 ] : Screen [ scrTutLifts ] objectID [ 6 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutLiftTextBox ]
[     1 ] : Setting position for - [ tutLiftTextBox ]
[     1 ] : Setting colors for - [ tutLiftTextBox ]
[     1 ] : Setting label for - [ tutLiftTextBox ]
[     1 ] : Adding [ tutLiftTextBox ] to screen [ scrTutLifts ]
[     1 ] : Screen [ scrTutLifts ] objectID [ 4 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutImageLift ]
[     1 ] : Setting position for - [ tutImageLift ]
[     1 ] : Setting colors for - [ tutImageLift ]
[     1 ] : Adding [ tutImageLift ] to screen [ scrTutLifts ]
[     1 ] : Screen [ scrTutLifts ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutLiftNext ]
[     1 ] : Setting position for - [ buttonTutLiftNext ]
[     1 ] : Setting label for - [ buttonTutLiftNext ]
[     1 ] : Setting the function call for [ buttonTutLiftNext ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutLiftNext ] to screen [ scrTutLifts ]
[     1 ] : Screen [ scrTutLifts ] objectID [ 31 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutLiftCancel ]
[     1 ] : Setting position for - [ buttonTutLiftCancel ]
[     1 ] : Setting label for - [ buttonTutLiftCancel ]
[     1 ] : Setting the function call for [ buttonTutLiftCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutLiftCancel ] to screen [ scrTutLifts ]
[     1 ] : Screen [ scrTutLifts ] objectID [ 32 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutTerminals ] created.
[     1 ] : Added new object - [ textLabelTutTerminals ]
[     1 ] : Setting position for - [ textLabelTutTerminals ]
[     1 ] : Setting label for - [ textLabelTutTerminals ]
[     1 ] : Adding [ textLabelTutTerminals ] to screen [ scrTutTerminals ]
[     1 ] : Screen [ scrTutTerminals ] objectID [ 7 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutTerminalTextBox ]
[     1 ] : Setting position for - [ tutTerminalTextBox ]
[     1 ] : Setting colors for - [ tutTerminalTextBox ]
[     1 ] : Setting label for - [ tutTerminalTextBox ]
[     1 ] : Adding [ tutTerminalTextBox ] to screen [ scrTutTerminals ]
[     1 ] : Screen [ scrTutTerminals ] objectID [ 5 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutImageTerminal ]
[     1 ] : Setting position for - [ tutImageTerminal ]
[     1 ] : Setting colors for - [ tutImageTerminal ]
[     1 ] : Adding [ tutImageTerminal ] to screen [ scrTutTerminals ]
[     1 ] : Screen [ scrTutTerminals ] objectID [ 1 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTerminalNext ]
[     1 ] : Setting position for - [ buttonTutTerminalNext ]
[     1 ] : Setting label for - [ buttonTutTerminalNext ]
[     1 ] : Setting the function call for [ buttonTutTerminalNext ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTerminalNext ] to screen [ scrTutTerminals ]
[     1 ] : Screen [ scrTutTerminals ] objectID [ 33 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTerminalCancel ]
[     1 ] : Setting position for - [ buttonTutTerminalCancel ]
[     1 ] : Setting label for - [ buttonTutTerminalCancel ]
[     1 ] : Setting the function call for [ buttonTutTerminalCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTerminalCancel ] to screen [ scrTutTerminals ]
[     1 ] : Screen [ scrTutTerminals ] objectID [ 34 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutHealing ] created.
[     1 ] : Added new object - [ textLabelTutHealing ]
[     1 ] : Setting position for - [ textLabelTutHealing ]
[     1 ] : Setting label for - [ textLabelTutHealing ]
[     1 ] : Adding [ textLabelTutHealing ] to screen [ scrTutHealing ]
[     1 ] : Screen [ scrTutHealing ] objectID [ 8 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutHealingTextBox ]
[     1 ] : Setting position for - [ tutHealingTextBox ]
[     1 ] : Setting colors for - [ tutHealingTextBox ]
[     1 ] : Setting label for - [ tutHealingTextBox ]
[     1 ] : Adding [ tutHealingTextBox ] to screen [ scrTutHealing ]
[     1 ] : Screen [ scrTutHealing ] objectID [ 6 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutImageHealing ]
[     1 ] : Setting position for - [ tutImageHealing ]
[     1 ] : Setting colors for - [ tutImageHealing ]
[     1 ] : Adding [ tutImageHealing ] to screen [ scrTutHealing ]
[     1 ] : Screen [ scrTutHealing ] objectID [ 2 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutHealinglNext ]
[     1 ] : Setting position for - [ buttonTutHealinglNext ]
[     1 ] : Setting label for - [ buttonTutHealinglNext ]
[     1 ] : Setting the function call for [ buttonTutHealinglNext ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutHealinglNext ] to screen [ scrTutHealing ]
[     1 ] : Screen [ scrTutHealing ] objectID [ 35 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutHealingCancel ]
[     1 ] : Setting position for - [ buttonTutHealingCancel ]
[     1 ] : Setting label for - [ buttonTutHealingCancel ]
[     1 ] : Setting the function call for [ buttonTutHealingCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutHealingCancel ] to screen [ scrTutHealing ]
[     1 ] : Screen [ scrTutHealing ] objectID [ 36 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrTutTips ] created.
[     1 ] : Added new object - [ textLabelTutTips ]
[     1 ] : Setting position for - [ textLabelTutTips ]
[     1 ] : Setting label for - [ textLabelTutTips ]
[     1 ] : Adding [ textLabelTutTips ] to screen [ scrTutTips ]
[     1 ] : Screen [ scrTutTips ] objectID [ 9 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ tutTipsTextBox ]
[     1 ] : Setting position for - [ tutTipsTextBox ]
[     1 ] : Setting colors for - [ tutTipsTextBox ]
[     1 ] : Setting label for - [ tutTipsTextBox ]
[     1 ] : Adding [ tutTipsTextBox ] to screen [ scrTutTips ]
[     1 ] : Screen [ scrTutTips ] objectID [ 7 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonTutTipsCancel ]
[     1 ] : Setting position for - [ buttonTutTipsCancel ]
[     1 ] : Setting label for - [ buttonTutTipsCancel ]
[     1 ] : Setting the function call for [ buttonTutTipsCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonTutTipsCancel ] to screen [ scrTutTips ]
[     1 ] : Screen [ scrTutTips ] objectID [ 37 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrGameControls ] created.
[     1 ] : Added new object - [ controlsHelp ]
[     1 ] : Setting position for - [ controlsHelp ]
[     1 ] : Setting label for - [ controlsHelp ]
[     1 ] : Adding [ controlsHelp ] to screen [ scrGameControls ]
[     1 ] : Screen [ scrGameControls ] objectID [ 10 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ keyCodeControl ]
[     1 ] : Setting position for - [ keyCodeControl ]
[     1 ] : Setting the function call for [ keyCodeControl ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ keyCodeControl ] to screen [ scrGameControls ]
[     1 ] : Screen [ scrGameControls ] objectID [ 0 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonControlApply ]
[     1 ] : Setting position for - [ buttonControlApply ]
[     1 ] : Setting label for - [ buttonControlApply ]
[     1 ] : Setting the function call for [ buttonControlApply ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonControlApply ] to screen [ scrGameControls ]
[     1 ] : Screen [ scrGameControls ] objectID [ 38 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonControlCancel ]
[     1 ] : Setting position for - [ buttonControlCancel ]
[     1 ] : Setting label for - [ buttonControlCancel ]
[     1 ] : Setting the function call for [ buttonControlCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonControlCancel ] to screen [ scrGameControls ]
[     1 ] : Screen [ scrGameControls ] objectID [ 39 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrKeyCodeCapture ] created.
[     1 ] : Added new object - [ captureHelp ]
[     1 ] : Setting position for - [ captureHelp ]
[     1 ] : Setting label for - [ captureHelp ]
[     1 ] : Adding [ captureHelp ] to screen [ scrKeyCodeCapture ]
[     1 ] : Screen [ scrKeyCodeCapture ] objectID [ 11 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ captureHelpCancel ]
[     1 ] : Setting position for - [ captureHelpCancel ]
[     1 ] : Setting label for - [ captureHelpCancel ]
[     1 ] : Adding [ captureHelpCancel ] to screen [ scrKeyCodeCapture ]
[     1 ] : Screen [ scrKeyCodeCapture ] objectID [ 12 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrRestartQuestion ] created.
[     1 ] : Added new object - [ restartTextBox ]
[     1 ] : Setting position for - [ restartTextBox ]
[     1 ] : Setting colors for - [ restartTextBox ]
[     1 ] : Setting label for - [ restartTextBox ]
[     1 ] : Adding [ restartTextBox ] to screen [ scrRestartQuestion ]
[     1 ] : Screen [ scrRestartQuestion ] objectID [ 8 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonRestartYes ]
[     1 ] : Setting position for - [ buttonRestartYes ]
[     1 ] : Setting label for - [ buttonRestartYes ]
[     1 ] : Setting the function call for [ buttonRestartYes ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonRestartYes ] to screen [ scrRestartQuestion ]
[     1 ] : Screen [ scrRestartQuestion ] objectID [ 40 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonRestartCancel ]
[     1 ] : Setting position for - [ buttonRestartCancel ]
[     1 ] : Setting label for - [ buttonRestartCancel ]
[     1 ] : Setting the function call for [ buttonRestartCancel ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonRestartCancel ] to screen [ scrRestartQuestion ]
[     1 ] : Screen [ scrRestartQuestion ] objectID [ 41 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrDisplayScoreTable ] created.
[     1 ] : Added new object - [ displayScoreTextBox ]
[     1 ] : Setting position for - [ displayScoreTextBox ]
[     1 ] : Setting colors for - [ displayScoreTextBox ]
[     1 ] : Setting label for - [ displayScoreTextBox ]
[     1 ] : Adding [ displayScoreTextBox ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 9 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ displayScoreOne ]
[     1 ] : Setting position for - [ displayScoreOne ]
[     1 ] : Setting colors for - [ displayScoreOne ]
[     1 ] : Setting label for - [ displayScoreOne ]
[     1 ] : Adding [ displayScoreOne ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 10 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ displayScoreTwo ]
[     1 ] : Setting position for - [ displayScoreTwo ]
[     1 ] : Setting colors for - [ displayScoreTwo ]
[     1 ] : Setting label for - [ displayScoreTwo ]
[     1 ] : Adding [ displayScoreTwo ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 11 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ displayScoreThree ]
[     1 ] : Setting position for - [ displayScoreThree ]
[     1 ] : Setting colors for - [ displayScoreThree ]
[     1 ] : Setting label for - [ displayScoreThree ]
[     1 ] : Adding [ displayScoreThree ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 12 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ displayScoreFour ]
[     1 ] : Setting position for - [ displayScoreFour ]
[     1 ] : Setting colors for - [ displayScoreFour ]
[     1 ] : Setting label for - [ displayScoreFour ]
[     1 ] : Adding [ displayScoreFour ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 13 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ displayScoreFive ]
[     1 ] : Setting position for - [ displayScoreFive ]
[     1 ] : Setting colors for - [ displayScoreFive ]
[     1 ] : Setting label for - [ displayScoreFive ]
[     1 ] : Adding [ displayScoreFive ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 14 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreInitialsOne ]
[     1 ] : Setting position for - [ scoreInitialsOne ]
[     1 ] : Setting colors for - [ scoreInitialsOne ]
[     1 ] : Setting label for - [ scoreInitialsOne ]
[     1 ] : Adding [ scoreInitialsOne ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 15 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreInitialsTwo ]
[     1 ] : Setting position for - [ scoreInitialsTwo ]
[     1 ] : Setting colors for - [ scoreInitialsTwo ]
[     1 ] : Setting label for - [ scoreInitialsTwo ]
[     1 ] : Adding [ scoreInitialsTwo ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 16 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreInitialsThree ]
[     1 ] : Setting position for - [ scoreInitialsThree ]
[     1 ] : Setting colors for - [ scoreInitialsThree ]
[     1 ] : Setting label for - [ scoreInitialsThree ]
[     1 ] : Adding [ scoreInitialsThree ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 17 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreInitialsFour ]
[     1 ] : Setting position for - [ scoreInitialsFour ]
[     1 ] : Setting colors for - [ scoreInitialsFour ]
[     1 ] : Setting label for - [ scoreInitialsFour ]
[     1 ] : Adding [ scoreInitialsFour ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 18 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreInitialsFive ]
[     1 ] : Setting position for - [ scoreInitialsFive ]
[     1 ] : Setting colors for - [ scoreInitialsFive ]
[     1 ] : Setting label for - [ scoreInitialsFive ]
[     1 ] : Adding [ scoreInitialsFive ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 19 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreScoreOne ]
[     1 ] : Setting position for - [ scoreScoreOne ]
[     1 ] : Setting colors for - [ scoreScoreOne ]
[     1 ] : Setting label for - [ scoreScoreOne ]
[     1 ] : Adding [ scoreScoreOne ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 20 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreScoreTwo ]
[     1 ] : Setting position for - [ scoreScoreTwo ]
[     1 ] : Setting colors for - [ scoreScoreTwo ]
[     1 ] : Setting label for - [ scoreScoreTwo ]
[     1 ] : Adding [ scoreScoreTwo ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 21 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreScoreThree ]
[     1 ] : Setting position for - [ scoreScoreThree ]
[     1 ] : Setting colors for - [ scoreScoreThree ]
[     1 ] : Setting label for - [ scoreScoreThree ]
[     1 ] : Adding [ scoreScoreThree ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 22 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreScoreFour ]
[     1 ] : Setting position for - [ scoreScoreFour ]
[     1 ] : Setting colors for - [ scoreScoreFour ]
[     1 ] : Setting label for - [ scoreScoreFour ]
[     1 ] : Adding [ scoreScoreFour ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 23 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreScoreFive ]
[     1 ] : Setting position for - [ scoreScoreFive ]
[     1 ] : Setting colors for - [ scoreScoreFive ]
[     1 ] : Setting label for - [ scoreScoreFive ]
[     1 ] : Adding [ scoreScoreFive ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 24 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonDisplayYes ]
[     1 ] : Setting position for - [ buttonDisplayYes ]
[     1 ] : Setting label for - [ buttonDisplayYes ]
[     1 ] : Setting the function call for [ buttonDisplayYes ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonDisplayYes ] to screen [ scrDisplayScoreTable ]
[     1 ] : Screen [ scrDisplayScoreTable ] objectID [ 42 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrEditScoreTable ] created.
[     1 ] : Added new object - [ editTextBox ]
[     1 ] : Setting position for - [ editTextBox ]
[     1 ] : Setting colors for - [ editTextBox ]
[     1 ] : Setting label for - [ editTextBox ]
[     1 ] : Adding [ editTextBox ] to screen [ scrEditScoreTable ]
[     1 ] : Screen [ scrEditScoreTable ] objectID [ 25 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreSliderOne ]
[     1 ] : Setting position for - [ scoreSliderOne ]
[     1 ] : Setting label for - [ scoreSliderOne ]
[     1 ] : Adding [ scoreSliderOne ] to screen [ scrEditScoreTable ]
[     1 ] : Screen [ scrEditScoreTable ] objectID [ 7 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreSliderTwo ]
[     1 ] : Setting position for - [ scoreSliderTwo ]
[     1 ] : Setting label for - [ scoreSliderTwo ]
[     1 ] : Adding [ scoreSliderTwo ] to screen [ scrEditScoreTable ]
[     1 ] : Screen [ scrEditScoreTable ] objectID [ 8 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ scoreSliderThree ]
[     1 ] : Setting position for - [ scoreSliderThree ]
[     1 ] : Setting label for - [ scoreSliderThree ]
[     1 ] : Adding [ scoreSliderThree ] to screen [ scrEditScoreTable ]
[     1 ] : Screen [ scrEditScoreTable ] objectID [ 9 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonEditYes ]
[     1 ] : Setting position for - [ buttonEditYes ]
[     1 ] : Setting label for - [ buttonEditYes ]
[     1 ] : Setting the function call for [ buttonEditYes ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonEditYes ] to screen [ scrEditScoreTable ]
[     1 ] : Screen [ scrEditScoreTable ] objectID [ 43 ] - Added
[     1 ] : -------------
[     1 ] : Screen [ scrEndGame ] created.
[     1 ] : Added new object - [ endGameTextBox ]
[     1 ] : Setting position for - [ endGameTextBox ]
[     1 ] : Setting colors for - [ endGameTextBox ]
[     1 ] : Setting label for - [ endGameTextBox ]
[     1 ] : Adding [ endGameTextBox ] to screen [ scrEndGame ]
[     1 ] : Screen [ scrEndGame ] objectID [ 26 ] - Added
[     1 ] : -------------
[     1 ] : Added new object - [ buttonEndGameYes ]
[     1 ] : Setting position for - [ buttonEndGameYes ]
[     1 ] : Setting label for - [ buttonEndGameYes ]
[     1 ] : Setting the function call for [ buttonEndGameYes ] - [ scr_guiHandleButtonPress ]
[     1 ] : Adding [ buttonEndGameYes ] to screen [ scrEndGame ]
[     1 ] : Screen [ scrEndGame ] objectID [ 44 ] - Added
[     1 ] : -------------
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Setting colors for - [ ALL ]
[     1 ] : Loaded image [ alltiles.bmp ]
[     1 ] : Loaded image [ hud.tga ]
[     1 ] : Loaded image [ 001.bmp ]
[     1 ] : Loaded image [ 123.bmp ]
[     1 ] : Loaded image [ 139.bmp ]
[     1 ] : Loaded image [ 247.bmp ]
[     1 ] : Loaded image [ 249.bmp ]
[     1 ] : Loaded image [ 296.bmp ]
[     1 ] : Loaded image [ 302.bmp ]
[     1 ] : Loaded image [ 329.bmp ]
[     1 ] : Loaded image [ 420.bmp ]
[     1 ] : Loaded image [ 476.bmp ]
[     1 ] : Loaded image [ 493.bmp ]
[     1 ] : Loaded image [ 516.bmp ]
[     1 ] : Loaded image [ 571.bmp ]
[     1 ] : Loaded image [ 598.bmp ]
[     1 ] : Loaded image [ 614.bmp ]
[     1 ] : Loaded image [ 615.bmp ]
[     1 ] : Loaded image [ 629.bmp ]
[     1 ] : Loaded image [ 711.bmp ]
[     1 ] : Loaded image [ 742.bmp ]
[     1 ] : Loaded image [ 751.bmp ]
[     1 ] : Loaded image [ 821.bmp ]
[     1 ] : Loaded image [ 834.bmp ]
[     1 ] : Loaded image [ 883.bmp ]
[     1 ] : Loaded image [ 999.bmp ]
[     1 ] : Loaded image [ splash.png ]
[     1 ] : Loaded image [ bullet_001.bmp ]
[     1 ] : Loaded image [ bullet_476.bmp ]
[     1 ] : Loaded image [ bullet_821.bmp ]
[     1 ] : Loaded image [ explosion.bmp ]
[     1 ] : Loaded image [ db_001.jpg ]
[     1 ] : Loaded image [ spotlight.png ]
[     1 ] : Loaded image [ alltiles_128.bmp ]
[     1 ] : Loaded image [ particleSmoke.png ]
[     1 ] : Loaded image [ particleSpark.png ]
[     1 ] : Loaded image [ static_1.png ]
[     1 ] : Loaded image [ static_2.png ]
[     1 ] : Loaded image [ static_3.png ]
[     1 ] : Loaded image [ static_4.png ]
[     1 ] : Loaded image [ static_5.png ]
[     1 ] : Loaded image [ static_6.png ]
[     1 ] : Loaded image [ static_7.png ]
[     1 ] : Loaded image [ static_8.png ]
[     2 ] : Loaded image [ static_9.png ]
[     2 ] : Get droid database information.
[     2 ] : Loaded image [ retro_blue.bmp ]
[     2 ] : Loaded image [ retro_blue_128.bmp ]
[     2 ] : Loaded tile set [ retro_blue.bmp ]
[     2 ] : Loaded tile set [ retro_blue_128.bmp ]
[     2 ] : Loaded ship level [ Vehicle Hold ]
[     2 ] : Loaded ship level [ Shuttle bay ]
[     2 ] : Loaded ship level [ Turrent 2 ]
[     2 ] : Loaded ship level [ Maintenance ]
[     2 ] : Loaded ship level [ Engineering ]
[     2 ] : Loaded ship level [ Mid cargo ]
[     2 ] : Loaded ship level [ Upper cargo ]
[     2 ] : Loaded ship level [ Kitchen ]
[     2 ] : Loaded ship level [ Robo stores ]
[     2 ] : Loaded ship level [ Quarters ]
[     2 ] : Loaded ship level [ Repairs ]
[     2 ] : Loaded ship level [ Staterooms ]
[     2 ] : Loaded ship level [ Stores ]
[     2 ] : Loaded ship level [ Research ]
[     2 ] : Loaded ship level [ Reactor ]
[     2 ] : Loaded ship level [ Airlock ]
[     2 ] : Loaded ship level [ Bridge ]
[     2 ] : Loaded ship level [ Turrent 1 ]
[     2 ] : Loaded ship level [ Turrent 2 ]
[     2 ] : Loaded ship level [ Observation ]
[     2 ] : Loaded sample [ collosion1.wav ]
[     2 ] : Loaded sample [ endTransmission1.wav ]
[     2 ] : Loaded sample [ greenAlert.wav ]
[     3 ] : Loaded sample [ lift1.wav ]
[     3 ] : Loaded sample [ scrollBeeps.wav ]
[     3 ] : Loaded sample [ transferdeadlock.wav ]
[     3 ] : Loaded sample [ yellowAlert.wav ]
[     3 ] : Loaded sample [ console1.wav ]
[     3 ] : Loaded sample [ endTransmission2.wav ]
[     3 ] : Loaded sample [ keypressBad.wav ]
[     3 ] : Loaded sample [ lift2.wav ]
[     3 ] : Loaded sample [ start1.wav ]
[     3 ] : Loaded sample [ transferMove.wav ]
[     3 ] : Loaded sample [ console2.wav ]
[     3 ] : Loaded sample [ energyHeal.wav ]
[     3 ] : Loaded sample [ keyPressGood.wav ]
[     3 ] : Loaded sample [ lift3.wav ]
[     3 ] : Loaded sample [ start2.wav ]
[     3 ] : Loaded sample [ transferStage1.wav ]
[     3 ] : Loaded sample [ damage.wav ]
[     3 ] : Loaded sample [ explode1.wav ]
[     3 ] : Loaded sample [ laser.wav ]
[     3 ] : Loaded sample [ lowEnergy.wav ]
[     3 ] : Loaded sample [ startAll.wav ]
[     3 ] : Loaded sample [ transferStage2.wav ]
[     3 ] : Loaded sample [ disruptor.wav ]
[     3 ] : Loaded sample [ explode2.wav ]
[     3 ] : Loaded sample [ levelShutdown.wav ]
[     3 ] : Loaded sample [ redAlert.wav ]
[     3 ] : Loaded sample [ transfer1.wav ]
[     3 ] : Loaded sample [ transferStart.wav ]
[     3 ] : Loaded sample [ door.wav ]
[     4 ] : Loaded image [ retro_blue.bmp ]
[     4 ] : Loaded image [ retro_blue_128.bmp ]
[     4 ] : Loaded tile set [ retro_blue.bmp ]
[     4 ] : Loaded tile set [ retro_blue_128.bmp ]
[    13 ] : Loaded image [ retro_blue.bmp ]
[    13 ] : Loaded image [ retro_blue_128.bmp ]
[    13 ] : Loaded tile set [ retro_blue.bmp ]
[    13 ] : Loaded tile set [ retro_blue_128.bmp ]
[    13 ] : Loaded image [ future_blue.bmp ]
[    13 ] : Loaded image [ future_blue_128.bmp ]
[    13 ] : Loaded tile set [ future_blue.bmp ]
[    13 ] : Loaded tile set [ future_blue_128.bmp ]
[    13 ] : Lift [ 0 ] PosX [ 352 ] PosY [ 352 ]
[    13 ] : Lift [ 1 ] PosX [ 1344 ] PosY [ 672 ]
[    13 ] : Loaded image [ future_blue.bmp ]
[    13 ] : Loaded image [ future_blue_128.bmp ]
[    13 ] : Loaded tile set [ future_blue.bmp ]
[    13 ] : Loaded tile set [ future_blue_128.bmp ]
[    26 ] : [ 6 ] - Starting AStar to find nearest healing tile
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 1 ] parent [ -1 ] moveCost [ 0 ] distanceCost [ 120 ]
[    26 ] : Requesting new path start [ 14.00 11.00 ] Dest [ 19.00 18.00 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 0 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 0 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 1 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 110 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 0 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 2 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 130 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 0 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 3 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 130 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 0 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 4 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 110 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 0 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 1 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 4 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 100 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 1 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 1 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 5 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 120 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 1 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 2 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 2 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 2 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 5 ] parent [ 2 ] moveCost [ 20 ] distanceCost [ 120 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 2 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 2 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 6 ] parent [ 2 ] moveCost [ 20 ] distanceCost [ 100 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 2 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 3 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 6 ] parent [ 3 ] moveCost [ 30 ] distanceCost [ 90 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 3 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 3 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 7 ] parent [ 3 ] moveCost [ 30 ] distanceCost [ 110 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 3 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 8 ] parent [ 3 ] moveCost [ 30 ] distanceCost [ 90 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 4 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 4 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 4 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 8 ] parent [ 4 ] moveCost [ 30 ] distanceCost [ 110 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 4 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 4 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 9 ] parent [ 4 ] moveCost [ 30 ] distanceCost [ 90 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 4 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 5 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 9 ] parent [ 5 ] moveCost [ 40 ] distanceCost [ 80 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 5 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 5 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 10 ] parent [ 5 ] moveCost [ 40 ] distanceCost [ 100 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 5 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 11 ] parent [ 5 ] moveCost [ 40 ] distanceCost [ 80 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 5 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 6 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 6 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 6 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 6 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 11 ] parent [ 6 ] moveCost [ 40 ] distanceCost [ 80 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 6 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 7 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 7 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 11 ] parent [ 7 ] moveCost [ 40 ] distanceCost [ 100 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 7 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 7 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 12 ] parent [ 7 ] moveCost [ 40 ] distanceCost [ 80 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 6 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 8 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 12 ] parent [ 8 ] moveCost [ 50 ] distanceCost [ 70 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 8 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 8 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 13 ] parent [ 8 ] moveCost [ 50 ] distanceCost [ 90 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 8 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 14 ] parent [ 8 ] moveCost [ 50 ] distanceCost [ 70 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 7 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 9 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 9 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 9 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 9 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 14 ] parent [ 9 ] moveCost [ 50 ] distanceCost [ 70 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 7 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 10 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 10 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 10 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 10 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 8 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 11 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 13 ] parent [ 11 ] moveCost [ 50 ] distanceCost [ 70 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 11 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 14 ] parent [ 11 ] moveCost [ 50 ] distanceCost [ 90 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 11 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 11 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 15 ] parent [ 11 ] moveCost [ 50 ] distanceCost [ 70 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 8 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 12 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 15 ] parent [ 12 ] moveCost [ 60 ] distanceCost [ 60 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 12 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 12 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 16 ] parent [ 12 ] moveCost [ 60 ] distanceCost [ 80 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 12 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 17 ] parent [ 12 ] moveCost [ 60 ] distanceCost [ 60 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 9 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 13 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 13 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 13 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 13 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 17 ] parent [ 13 ] moveCost [ 60 ] distanceCost [ 60 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 9 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 14 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 14 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 14 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 14 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 9 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 15 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 16 ] parent [ 15 ] moveCost [ 60 ] distanceCost [ 60 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 15 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 15 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 15 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 17 ] parent [ 15 ] moveCost [ 60 ] distanceCost [ 60 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 10 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 16 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 16 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 17 ] parent [ 16 ] moveCost [ 60 ] distanceCost [ 80 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 16 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 16 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 18 ] parent [ 16 ] moveCost [ 60 ] distanceCost [ 60 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 10 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 17 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 18 ] parent [ 17 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 17 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 17 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 19 ] parent [ 17 ] moveCost [ 70 ] distanceCost [ 70 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 17 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 20 ] parent [ 17 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 11 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 18 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 18 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 18 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 18 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 20 ] parent [ 18 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 11 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 19 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 19 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 19 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 19 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 11 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 20 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 19 ] parent [ 20 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 20 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 20 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 20 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 20 ] parent [ 20 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 11 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 21 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 21 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 21 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 21 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 20 ] parent [ 21 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 12 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 22 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 22 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 20 ] parent [ 22 ] moveCost [ 70 ] distanceCost [ 70 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 22 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 22 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 21 ] parent [ 22 ] moveCost [ 70 ] distanceCost [ 50 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 12 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 23 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 21 ] parent [ 23 ] moveCost [ 80 ] distanceCost [ 40 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 23 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 23 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 22 ] parent [ 23 ] moveCost [ 80 ] distanceCost [ 60 ]
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 23 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 23 ] parent [ 23 ] moveCost [ 80 ] distanceCost [ 40 ]
[    26 ] : searchThread - whichPath [ 0 ]
[    26 ] : Search the open nodes and find the one with the lowest total cost
[    26 ] : Move open node [ 13 ] to closedNode list
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 24 ] Direction [ RIGHT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 24 ] Direction [ LEFT ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 24 ] Direction [ UP ]
[    26 ] : See if the node is solid or not
[    26 ] : ---
[    26 ] : Generate a new node based on the node with the current lowest cost.
[    26 ] : Parent [ 24 ] Direction [ DOWN ]
[    26 ] : See if the node is solid or not
[    26 ] : Adding new tile to openNode list
[    26 ] : Path [ 0 ] Size [ 23 ] parent [ 24 ] moveCost [ 80 ] distanceCost [ 40 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 13 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 25 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 25 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 25 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 25 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 13 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 26 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 22 ] parent [ 26 ] moveCost [ 80 ] distanceCost [ 40 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 26 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 26 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 26 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 23 ] parent [ 26 ] moveCost [ 80 ] distanceCost [ 40 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 13 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 27 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 27 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 27 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 27 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 23 ] parent [ 27 ] moveCost [ 80 ] distanceCost [ 40 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 13 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 28 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 28 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 28 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 28 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 14 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 29 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 29 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 22 ] parent [ 29 ] moveCost [ 80 ] distanceCost [ 60 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 29 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 29 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 23 ] parent [ 29 ] moveCost [ 80 ] distanceCost [ 40 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 14 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 30 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 23 ] parent [ 30 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 30 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 30 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 24 ] parent [ 30 ] moveCost [ 90 ] distanceCost [ 50 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 30 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 25 ] parent [ 30 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 15 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 31 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 31 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 31 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 31 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 25 ] parent [ 31 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 15 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 32 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 32 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 32 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 32 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 25 ] parent [ 32 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 15 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 33 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 25 ] parent [ 33 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 33 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 33 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 33 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 26 ] parent [ 33 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 15 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 34 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 34 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 34 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 34 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 26 ] parent [ 34 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 15 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 35 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 35 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 35 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 35 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 26 ] parent [ 35 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 16 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 36 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 36 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 26 ] parent [ 36 ] moveCost [ 90 ] distanceCost [ 50 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 36 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 36 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 27 ] parent [ 36 ] moveCost [ 90 ] distanceCost [ 30 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 16 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 37 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 27 ] parent [ 37 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 37 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 37 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 28 ] parent [ 37 ] moveCost [ 100 ] distanceCost [ 40 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 37 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 37 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 38 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 38 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 38 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 38 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 38 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 39 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 39 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 39 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 39 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 39 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 40 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 40 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 40 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 40 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 40 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 41 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 41 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 41 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 41 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 41 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 42 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 42 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 42 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 42 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 42 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 43 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 43 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 43 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 43 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 43 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 17 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 44 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 44 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 44 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 44 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 44 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 18 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 45 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 29 ] parent [ 45 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 45 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 30 ] parent [ 45 ] moveCost [ 100 ] distanceCost [ 40 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 45 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 45 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 45 ] moveCost [ 100 ] distanceCost [ 20 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 18 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 46 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 46 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 46 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 46 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 32 ] parent [ 46 ] moveCost [ 110 ] distanceCost [ 30 ]
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 46 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 47 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 47 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 47 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 47 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 32 ] parent [ 47 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 48 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 48 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 48 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 48 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 49 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 49 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 49 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 49 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 49 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 50 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 50 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 50 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 50 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 50 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 51 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 51 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 51 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 51 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 51 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 52 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 52 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 52 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 52 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 52 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 53 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 53 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 53 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 53 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 53 ] moveCost [ 110 ] distanceCost [ 10 ]
[    27 ] : searchThread - whichPath [ 0 ]
[    27 ] : Search the open nodes and find the one with the lowest total cost
[    27 ] : Move open node [ 19 ] to closedNode list
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 54 ] Direction [ RIGHT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 54 ] Direction [ LEFT ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 54 ] Direction [ UP ]
[    27 ] : See if the node is solid or not
[    27 ] : ---
[    27 ] : Generate a new node based on the node with the current lowest cost.
[    27 ] : Parent [ 54 ] Direction [ DOWN ]
[    27 ] : See if the node is solid or not
[    27 ] : Adding new tile to openNode list
[    27 ] : Path [ 0 ] Size [ 31 ] parent [ 54 ] moveCost [ 110 ] distanceCost [ 10 ]
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 19 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 55 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 55 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 55 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 55 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 31 ] parent [ 55 ] moveCost [ 110 ] distanceCost [ 10 ]
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 20 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 56 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 56 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 31 ] parent [ 56 ] moveCost [ 110 ] distanceCost [ 30 ]
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 56 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 56 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 20 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 57 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 31 ] parent [ 57 ] moveCost [ 120 ] distanceCost [ 0 ]
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 57 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 57 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 32 ] parent [ 57 ] moveCost [ 120 ] distanceCost [ 20 ]
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 57 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 33 ] parent [ 57 ] moveCost [ 120 ] distanceCost [ 0 ]
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 21 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 58 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 58 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 58 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 58 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 21 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 59 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 32 ] parent [ 59 ] moveCost [ 120 ] distanceCost [ 0 ]
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 59 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 59 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 59 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 33 ] parent [ 59 ] moveCost [ 120 ] distanceCost [ 0 ]
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 21 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 60 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 60 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 60 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 60 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 33 ] parent [ 60 ] moveCost [ 120 ] distanceCost [ 0 ]
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : Search the open nodes and find the one with the lowest total cost
[    28 ] : Move open node [ 21 ] to closedNode list
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 61 ] Direction [ RIGHT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 61 ] Direction [ LEFT ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 61 ] Direction [ UP ]
[    28 ] : See if the node is solid or not
[    28 ] : ---
[    28 ] : Generate a new node based on the node with the current lowest cost.
[    28 ] : Parent [ 61 ] Direction [ DOWN ]
[    28 ] : See if the node is solid or not
[    28 ] : Adding new tile to openNode list
[    28 ] : Path [ 0 ] Size [ 33 ] parent [ 61 ] moveCost [ 120 ] distanceCost [ 0 ]
[    28 ] : Move open node [ 33 ] to closedNode list
[    28 ] : searchThread - whichPath [ 0 ]
[    28 ] : [ 6 ] - Have not found the AStar destination
[    59 ] : Droid [ 6 ] fully healed
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 1 ] parent [ -1 ] moveCost [ 0 ] distanceCost [ 40 ]
[    59 ] : Requesting new path start [ 19.00 18.00 ] Dest [ 21.00 20.00 ]
[    59 ] : searchThread - whichPath [ 0 ]
[    59 ] : Search the open nodes and find the one with the lowest total cost
[    59 ] : Move open node [ 0 ] to closedNode list
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 0 ] Direction [ RIGHT ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 1 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 30 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 0 ] Direction [ LEFT ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 2 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 50 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 0 ] Direction [ UP ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 3 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 50 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 0 ] Direction [ DOWN ]
[    59 ] : See if the node is solid or not
[    59 ] : searchThread - whichPath [ 0 ]
[    59 ] : Search the open nodes and find the one with the lowest total cost
[    59 ] : Move open node [ 0 ] to closedNode list
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 1 ] Direction [ RIGHT ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 3 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 20 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 1 ] Direction [ LEFT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 1 ] Direction [ UP ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 4 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 40 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 1 ] Direction [ DOWN ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 5 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 20 ]
[    59 ] : searchThread - whichPath [ 0 ]
[    59 ] : Search the open nodes and find the one with the lowest total cost
[    59 ] : Move open node [ 2 ] to closedNode list
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 2 ] Direction [ RIGHT ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 5 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 10 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 2 ] Direction [ LEFT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 2 ] Direction [ UP ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 6 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 30 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 2 ] Direction [ DOWN ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 7 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 10 ]
[    59 ] : searchThread - whichPath [ 0 ]
[    59 ] : Search the open nodes and find the one with the lowest total cost
[    59 ] : Move open node [ 3 ] to closedNode list
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 3 ] Direction [ RIGHT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 3 ] Direction [ LEFT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 3 ] Direction [ UP ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 3 ] Direction [ DOWN ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 7 ] parent [ 3 ] moveCost [ 30 ] distanceCost [ 10 ]
[    59 ] : searchThread - whichPath [ 0 ]
[    59 ] : Search the open nodes and find the one with the lowest total cost
[    59 ] : Move open node [ 3 ] to closedNode list
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 4 ] Direction [ RIGHT ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 7 ] parent [ 4 ] moveCost [ 40 ] distanceCost [ 0 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 4 ] Direction [ LEFT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 4 ] Direction [ UP ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 8 ] parent [ 4 ] moveCost [ 40 ] distanceCost [ 20 ]
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 4 ] Direction [ DOWN ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 9 ] parent [ 4 ] moveCost [ 40 ] distanceCost [ 0 ]
[    59 ] : searchThread - whichPath [ 0 ]
[    59 ] : Search the open nodes and find the one with the lowest total cost
[    59 ] : Move open node [ 4 ] to closedNode list
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 5 ] Direction [ RIGHT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 5 ] Direction [ LEFT ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 5 ] Direction [ UP ]
[    59 ] : See if the node is solid or not
[    59 ] : ---
[    59 ] : Generate a new node based on the node with the current lowest cost.
[    59 ] : Parent [ 5 ] Direction [ DOWN ]
[    59 ] : See if the node is solid or not
[    59 ] : Adding new tile to openNode list
[    59 ] : Path [ 0 ] Size [ 9 ] parent [ 5 ] moveCost [ 40 ] distanceCost [ 0 ]
[    59 ] : Move open node [ 9 ] to closedNode list
[    59 ] : searchThread - whichPath [ 0 ]
[    72 ] : [ 4 ] - Starting AStar to find nearest healing tile
[    72 ] : Adding new tile to openNode list
[    72 ] : Path [ 0 ] Size [ 1 ] parent [ -1 ] moveCost [ 0 ] distanceCost [ 20 ]
[    72 ] : Requesting new path start [ 21.00 18.00 ] Dest [ 19.00 18.00 ]
[    72 ] : searchThread - whichPath [ 0 ]
[    72 ] : Search the open nodes and find the one with the lowest total cost
[    72 ] : Move open node [ 0 ] to closedNode list
[    72 ] : ---
[    72 ] : Generate a new node based on the node with the current lowest cost.
[    72 ] : Parent [ 0 ] Direction [ RIGHT ]
[    72 ] : See if the node is solid or not
[    72 ] : Adding new tile to openNode list
[    72 ] : Path [ 0 ] Size [ 1 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 30 ]
[    72 ] : ---
[    72 ] : Generate a new node based on the node with the current lowest cost.
[    72 ] : Parent [ 0 ] Direction [ LEFT ]
[    72 ] : See if the node is solid or not
[    72 ] : Adding new tile to openNode list
[    72 ] : Path [ 0 ] Size [ 2 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 10 ]
[    72 ] : ---
[    72 ] : Generate a new node based on the node with the current lowest cost.
[    72 ] : Parent [ 0 ] Direction [ UP ]
[    72 ] : See if the node is solid or not
[    72 ] : Adding new tile to openNode list
[    72 ] : Path [ 0 ] Size [ 3 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 10 ]
[    72 ] : ---
[    72 ] : Generate a new node based on the node with the current lowest cost.
[    72 ] : Parent [ 0 ] Direction [ DOWN ]
[    72 ] : See if the node is solid or not
[    72 ] : Adding new tile to openNode list
[    72 ] : Path [ 0 ] Size [ 4 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 30 ]
[    72 ] : searchThread - whichPath [ 0 ]
[    72 ] : Search the open nodes and find the one with the lowest total cost
[    72 ] : Move open node [ 1 ] to closedNode list
[    72 ] : ---
[    72 ] : Generate a new node based on the node with the current lowest cost.
[    72 ] : Parent [ 1 ] Direction [ RIGHT ]
[    72 ] : See if the node is solid or not
[    72 ] : ---
[    72 ] : Generate a new node based on the node with the current lowest cost.
[    72 ] : Parent [ 1 ] Direction [ LEFT ]
[    72 ] : See if the node is solid or not
[    72 ] : Adding new tile to openNode list
[    72 ] : Path [ 0 ] Size [ 4 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 0 ]
[    72 ] : Move open node [ 4 ] to closedNode list
[    72 ] : searchThread - whichPath [ 0 ]
[    72 ] : [ 4 ] - Have not found the AStar destination
[    77 ] : Droid [ 4 ] fully healed
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 1 ] parent [ -1 ] moveCost [ 0 ] distanceCost [ 40 ]
[    77 ] : Requesting new path start [ 19.00 18.00 ] Dest [ 21.00 20.00 ]
[    77 ] : searchThread - whichPath [ 0 ]
[    77 ] : Search the open nodes and find the one with the lowest total cost
[    77 ] : Move open node [ 0 ] to closedNode list
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 0 ] Direction [ RIGHT ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 1 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 30 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 0 ] Direction [ LEFT ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 2 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 50 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 0 ] Direction [ UP ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 3 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 50 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 0 ] Direction [ DOWN ]
[    77 ] : See if the node is solid or not
[    77 ] : searchThread - whichPath [ 0 ]
[    77 ] : Search the open nodes and find the one with the lowest total cost
[    77 ] : Move open node [ 0 ] to closedNode list
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 1 ] Direction [ RIGHT ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 3 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 20 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 1 ] Direction [ LEFT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 1 ] Direction [ UP ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 4 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 40 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 1 ] Direction [ DOWN ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 5 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 20 ]
[    77 ] : searchThread - whichPath [ 0 ]
[    77 ] : Search the open nodes and find the one with the lowest total cost
[    77 ] : Move open node [ 2 ] to closedNode list
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 2 ] Direction [ RIGHT ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 5 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 10 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 2 ] Direction [ LEFT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 2 ] Direction [ UP ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 6 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 30 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 2 ] Direction [ DOWN ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 7 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 10 ]
[    77 ] : searchThread - whichPath [ 0 ]
[    77 ] : Search the open nodes and find the one with the lowest total cost
[    77 ] : Move open node [ 3 ] to closedNode list
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 3 ] Direction [ RIGHT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 3 ] Direction [ LEFT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 3 ] Direction [ UP ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 3 ] Direction [ DOWN ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 7 ] parent [ 3 ] moveCost [ 30 ] distanceCost [ 10 ]
[    77 ] : searchThread - whichPath [ 0 ]
[    77 ] : Search the open nodes and find the one with the lowest total cost
[    77 ] : Move open node [ 3 ] to closedNode list
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 4 ] Direction [ RIGHT ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 7 ] parent [ 4 ] moveCost [ 40 ] distanceCost [ 0 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 4 ] Direction [ LEFT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 4 ] Direction [ UP ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 8 ] parent [ 4 ] moveCost [ 40 ] distanceCost [ 20 ]
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 4 ] Direction [ DOWN ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 9 ] parent [ 4 ] moveCost [ 40 ] distanceCost [ 0 ]
[    77 ] : searchThread - whichPath [ 0 ]
[    77 ] : Search the open nodes and find the one with the lowest total cost
[    77 ] : Move open node [ 4 ] to closedNode list
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 5 ] Direction [ RIGHT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 5 ] Direction [ LEFT ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 5 ] Direction [ UP ]
[    77 ] : See if the node is solid or not
[    77 ] : ---
[    77 ] : Generate a new node based on the node with the current lowest cost.
[    77 ] : Parent [ 5 ] Direction [ DOWN ]
[    77 ] : See if the node is solid or not
[    77 ] : Adding new tile to openNode list
[    77 ] : Path [ 0 ] Size [ 9 ] parent [ 5 ] moveCost [ 40 ] distanceCost [ 0 ]
[    77 ] : Move open node [ 9 ] to closedNode list
[    77 ] : searchThread - whichPath [ 0 ]
[    86 ] : [ 3 ] - Starting AStar to find nearest healing tile
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 1 ] parent [ -1 ] moveCost [ 0 ] distanceCost [ 50 ]
[    86 ] : Requesting new path start [ 11.00 21.00 ] Dest [ 19.00 18.00 ]
[    86 ] : searchThread - whichPath [ 0 ]
[    86 ] : Search the open nodes and find the one with the lowest total cost
[    86 ] : Move open node [ 0 ] to closedNode list
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 0 ] Direction [ RIGHT ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 1 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 40 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 0 ] Direction [ LEFT ]
[    86 ] : See if the node is solid or not
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 0 ] Direction [ UP ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 2 ] parent [ 0 ] moveCost [ 10 ] distanceCost [ 60 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 0 ] Direction [ DOWN ]
[    86 ] : See if the node is solid or not
[    86 ] : searchThread - whichPath [ 0 ]
[    86 ] : Search the open nodes and find the one with the lowest total cost
[    86 ] : Move open node [ 0 ] to closedNode list
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 1 ] Direction [ RIGHT ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 2 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 30 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 1 ] Direction [ LEFT ]
[    86 ] : See if the node is solid or not
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 1 ] Direction [ UP ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 3 ] parent [ 1 ] moveCost [ 20 ] distanceCost [ 50 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 1 ] Direction [ DOWN ]
[    86 ] : See if the node is solid or not
[    86 ] : searchThread - whichPath [ 0 ]
[    86 ] : Search the open nodes and find the one with the lowest total cost
[    86 ] : Move open node [ 1 ] to closedNode list
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 2 ] Direction [ RIGHT ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 3 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 20 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 2 ] Direction [ LEFT ]
[    86 ] : See if the node is solid or not
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 2 ] Direction [ UP ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 4 ] parent [ 2 ] moveCost [ 30 ] distanceCost [ 40 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 2 ] Direction [ DOWN ]
[    86 ] : See if the node is solid or not
[    86 ] : searchThread - whichPath [ 0 ]
[    86 ] : Search the open nodes and find the one with the lowest total cost
[    86 ] : Move open node [ 2 ] to closedNode list
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 3 ] Direction [ RIGHT ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 4 ] parent [ 3 ] moveCost [ 40 ] distanceCost [ 10 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 3 ] Direction [ LEFT ]
[    86 ] : See if the node is solid or not
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 3 ] Direction [ UP ]
[    86 ] : See if the node is solid or not
[    86 ] : Adding new tile to openNode list
[    86 ] : Path [ 0 ] Size [ 5 ] parent [ 3 ] moveCost [ 40 ] distanceCost [ 30 ]
[    86 ] : ---
[    86 ] : Generate a new node based on the node with the current lowest cost.
[    86 ] : Parent [ 3 ] Direction [ DOWN ]
[    86 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 3 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 4 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 5 ] parent [ 4 ] moveCost [ 50 ] distanceCost [ 0 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 4 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 4 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 6 ] parent [ 4 ] moveCost [ 50 ] distanceCost [ 20 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 4 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 4 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 5 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 6 ] parent [ 5 ] moveCost [ 60 ] distanceCost [ 10 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 5 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 5 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 5 ] moveCost [ 60 ] distanceCost [ 10 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 5 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 6 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 6 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 6 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 6 ] moveCost [ 20 ] distanceCost [ 70 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 6 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 7 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 7 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 7 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 7 ] moveCost [ 30 ] distanceCost [ 60 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 7 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 8 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 8 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 8 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 8 ] moveCost [ 40 ] distanceCost [ 50 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 8 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 9 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 9 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 9 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 9 ] moveCost [ 50 ] distanceCost [ 40 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 9 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 10 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 10 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 10 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 10 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 11 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 6 ] parent [ 11 ] moveCost [ 70 ] distanceCost [ 20 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 11 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 11 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 11 ] moveCost [ 70 ] distanceCost [ 0 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 11 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 12 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 12 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 12 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 12 ] moveCost [ 70 ] distanceCost [ 20 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 12 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 5 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 13 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 7 ] parent [ 13 ] moveCost [ 80 ] distanceCost [ 10 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 13 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 13 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 8 ] parent [ 13 ] moveCost [ 80 ] distanceCost [ 10 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 13 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 14 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 14 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 14 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 8 ] parent [ 14 ] moveCost [ 30 ] distanceCost [ 80 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 14 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 15 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 15 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 15 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 8 ] parent [ 15 ] moveCost [ 40 ] distanceCost [ 70 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 15 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 16 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 16 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 16 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 8 ] parent [ 16 ] moveCost [ 50 ] distanceCost [ 60 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 16 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 17 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 17 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 17 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 8 ] parent [ 17 ] moveCost [ 60 ] distanceCost [ 50 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 17 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 18 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 8 ] parent [ 18 ] moveCost [ 80 ] distanceCost [ 30 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 18 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 18 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : New node is better than the old one
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 9 ] parent [ 18 ] moveCost [ 80 ] distanceCost [ 40 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 18 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 19 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 19 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 19 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 9 ] parent [ 19 ] moveCost [ 80 ] distanceCost [ 30 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 19 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 20 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 9 ] parent [ 20 ] moveCost [ 90 ] distanceCost [ 20 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 20 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 20 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 20 ] moveCost [ 90 ] distanceCost [ 0 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 20 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 21 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 21 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 21 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 21 ] moveCost [ 90 ] distanceCost [ 20 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 21 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 8 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 22 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 22 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 22 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 22 ] moveCost [ 100 ] distanceCost [ 10 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 22 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 23 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 23 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 23 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 23 ] moveCost [ 40 ] distanceCost [ 90 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 23 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 24 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 24 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 24 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 24 ] moveCost [ 50 ] distanceCost [ 80 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 24 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 25 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 25 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 25 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 25 ] moveCost [ 60 ] distanceCost [ 70 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 25 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 26 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 26 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 26 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 26 ] moveCost [ 70 ] distanceCost [ 60 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 26 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 0 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 27 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 10 ] parent [ 27 ] moveCost [ 90 ] distanceCost [ 40 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 27 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 27 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : New node is better than the old one
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 11 ] parent [ 27 ] moveCost [ 90 ] distanceCost [ 80 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 27 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 1 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 28 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 28 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 28 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 11 ] parent [ 28 ] moveCost [ 90 ] distanceCost [ 40 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 28 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 1 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 29 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 11 ] parent [ 29 ] moveCost [ 100 ] distanceCost [ 30 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 29 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 29 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 29 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 1 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 30 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 30 ] Direction [ LEFT ]
[    87 ] : See if the node is solid or not
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 30 ] Direction [ UP ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 11 ] parent [ 30 ] moveCost [ 100 ] distanceCost [ 30 ]
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 30 ] Direction [ DOWN ]
[    87 ] : See if the node is solid or not
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : Search the open nodes and find the one with the lowest total cost
[    87 ] : Move open node [ 1 ] to closedNode list
[    87 ] : ---
[    87 ] : Generate a new node based on the node with the current lowest cost.
[    87 ] : Parent [ 31 ] Direction [ RIGHT ]
[    87 ] : See if the node is solid or not
[    87 ] : Adding new tile to openNode list
[    87 ] : Path [ 0 ] Size [ 11 ] parent [ 31 ] moveCost [ 110 ] distanceCost [ 0 ]
[    87 ] : Move open node [ 11 ] to closedNode list
[    87 ] : searchThread - whichPath [ 0 ]
[    87 ] : [ 3 ] - Have not found the AStar destination
[    97 ] : About to free spark particle [ 37 ]
[    97 ] : About to free spark particle [ 36 ]
[    97 ] : About to free spark particle [ 35 ]
[    97 ] : About to free spark particle [ 34 ]
[    97 ] : About to free spark particle [ 33 ]
[    97 ] : About to free spark particle [ 32 ]
[    97 ] : About to free spark particle [ 31 ]
[    97 ] : About to free spark particle [ 30 ]
[    97 ] : About to free spark particle [ 29 ]
[    97 ] : About to free spark particle [ 28 ]
[    97 ] : About to free spark particle [ 27 ]
[    97 ] : About to free spark particle [ 26 ]
[    97 ] : About to free spark particle [ 25 ]
[    97 ] : About to free spark particle [ 24 ]
[    97 ] : About to free spark particle [ 23 ]
[    97 ] : About to free spark particle [ 22 ]
[    97 ] : About to free spark particle [ 21 ]
[    97 ] : About to free spark particle [ 20 ]
[    97 ] : About to free spark particle [ 19 ]
[    97 ] : About to free spark particle [ 18 ]
[    97 ] : About to free spark particle [ 17 ]
[    97 ] : About to free spark particle [ 16 ]
[    97 ] : About to free spark particle [ 15 ]
[    97 ] : About to free spark particle [ 14 ]
[    97 ] : About to free spark particle [ 13 ]
[    97 ] : About to free spark particle [ 12 ]
[    97 ] : About to free spark particle [ 11 ]
[    97 ] : About to free spark particle [ 10 ]
[    97 ] : About to free spark particle [ 9 ]
[    97 ] : About to free spark particle [ 8 ]
[    97 ] : About to free spark particle [ 7 ]
[    97 ] : About to free spark particle [ 6 ]
[    97 ] : About to free spark particle [ 5 ]
[    97 ] : About to free spark particle [ 4 ]
[    97 ] : About to free spark particle [ 3 ]
[    97 ] : About to free spark particle [ 2 ]
[    97 ] : Freeing particle emitterItr.
[    98 ] : Remove physics objects for droid [ 3 ]
[   101 ] : Profile - Average time for tiles [ 0.000062 ]
[   101 ] : Error: Could not save config values to file [ config.ini ]
[   101 ] : Keybind: Info: Key states saved to file.
[   101 ] : Logfile: Log file closed:
[   101 ] : 27-08-2017	17:42:34
[   101 ] : -----------------------------------------------------------------------------


